<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>精神的壳</title>
  
  
  <link href="http://yoursite.com/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-05-17T15:18:04.313Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>路边的土豆</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>网络那些事之网络层</title>
    <link href="http://yoursite.com/2020/01/25/%E7%BD%91%E7%BB%9C%E9%82%A3%E4%BA%9B%E4%BA%8B%E4%B9%8B%E7%BD%91%E7%BB%9C%E5%B1%82/"/>
    <id>http://yoursite.com/2020/01/25/%E7%BD%91%E7%BB%9C%E9%82%A3%E4%BA%9B%E4%BA%8B%E4%B9%8B%E7%BD%91%E7%BB%9C%E5%B1%82/</id>
    <published>2020-01-25T08:18:13.000Z</published>
    <updated>2020-05-17T15:18:04.313Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;网络层的核心功能有两个：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;路由：确定分组从源到目的经过的路径。由&lt;strong&gt;路由算法&lt;/strong&gt;确定转发表&lt;/li&gt;
&lt;li&gt;转发：数据报由路由器的输入端口转移到合适的输出端口。每个路由器维护一个&lt;strong&gt;转发表&lt;/strong&gt;&lt;</summary>
      
    
    
    
    <category term="计算机网络" scheme="http://yoursite.com/categories/计算机网络/"/>
    
    
    <category term="网络层" scheme="http://yoursite.com/tags/网络层/"/>
    
  </entry>
  
  <entry>
    <title>Cache Coherency and Memory Consistency</title>
    <link href="http://yoursite.com/2021/01/20/Cache-Coherency-%E4%B8%8E-Memory-Consistency/"/>
    <id>http://yoursite.com/2021/01/20/Cache-Coherency-%E4%B8%8E-Memory-Consistency/</id>
    <published>2021-01-20T03:26:46.000Z</published>
    <updated>2021-03-01T05:53:44.726Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://qiuyueqy.com/2020/03/24/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-%E4%BB%A5Go%E4%B8%BA%E4%BE%8B/&quot; target=&quot;_blank&quot; rel=&quot;noopene</summary>
      
    
    
    
    <category term="计算机系统" scheme="http://yoursite.com/categories/计算机系统/"/>
    
    
    <category term="并发编程" scheme="http://yoursite.com/tags/并发编程/"/>
    
  </entry>
  
  <entry>
    <title>Go语言底层大冒险之interface</title>
    <link href="http://yoursite.com/2020/12/26/Go%E8%AF%AD%E8%A8%80%E5%BA%95%E5%B1%82%E5%A4%A7%E5%86%92%E9%99%A9%E4%B9%8Binterface/"/>
    <id>http://yoursite.com/2020/12/26/Go%E8%AF%AD%E8%A8%80%E5%BA%95%E5%B1%82%E5%A4%A7%E5%86%92%E9%99%A9%E4%B9%8Binterface/</id>
    <published>2020-12-26T02:52:00.000Z</published>
    <updated>2021-01-21T03:28:52.415Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;很多现代语言都有“接口”这个概念。接口是为了解耦，即通过引入一个约定的中间层解除上下层之间的高度依赖关系。这东西听着玄乎，用饭馆来举个例子，我们作为顾客通常并不关心菜是怎么做的，只是和厨师有诸如“麻婆豆腐必须是辣的”，“冰淇淋必须是冷的”这样的约定，厨师用自己的方法把这个约</summary>
      
    
    
    
    <category term="语言" scheme="http://yoursite.com/categories/语言/"/>
    
    
    <category term="Go" scheme="http://yoursite.com/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>大话光猫，路由器与交换机</title>
    <link href="http://yoursite.com/2020/12/21/%E5%85%89%E7%8C%AB%EF%BC%8C%E8%B7%AF%E7%94%B1%E4%B8%8E%E4%BA%A4%E6%8D%A2%E6%9C%BA/"/>
    <id>http://yoursite.com/2020/12/21/%E5%85%89%E7%8C%AB%EF%BC%8C%E8%B7%AF%E7%94%B1%E4%B8%8E%E4%BA%A4%E6%8D%A2%E6%9C%BA/</id>
    <published>2020-12-21T01:00:15.000Z</published>
    <updated>2020-12-21T02:39:28.708Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;生活中最常见的网络设备就是光猫和路由器了。一些较大型的企业可能还会用到交换机。以家庭上网为例，数据从光纤到达个人设备的流程是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/12/21/fD5YlTFmNaG49hq.png&quot; al</summary>
      
    
    
    
    <category term="计算机网络" scheme="http://yoursite.com/categories/计算机网络/"/>
    
    
    <category term="硬件" scheme="http://yoursite.com/tags/硬件/"/>
    
  </entry>
  
  <entry>
    <title>异常、中断与信号</title>
    <link href="http://yoursite.com/2020/12/12/%E5%BC%82%E5%B8%B8%E3%80%81%E4%B8%AD%E6%96%AD%E4%B8%8E%E4%BF%A1%E5%8F%B7/"/>
    <id>http://yoursite.com/2020/12/12/%E5%BC%82%E5%B8%B8%E3%80%81%E4%B8%AD%E6%96%AD%E4%B8%8E%E4%BF%A1%E5%8F%B7/</id>
    <published>2020-12-12T07:59:01.000Z</published>
    <updated>2020-12-14T03:54:25.176Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;任何一个通用 CPU 都可以在执行完一条指令后检测从 CPU 外部发送过来或从内部产生的一种特殊信息，并且可以立即转而对该信息进行处理。这种“特殊信息”衍生出了异常、中断和信号这三个概念，其中牵涉到的知识点非常广泛且复杂，环环相扣。本文旨在对其进行梳理，形成一个脉络，具体底</summary>
      
    
    
    
    <category term="计算机系统" scheme="http://yoursite.com/categories/计算机系统/"/>
    
    
    <category term="异常处理" scheme="http://yoursite.com/tags/异常处理/"/>
    
  </entry>
  
  <entry>
    <title>函数调用背后的秘密——寄存器与栈</title>
    <link href="http://yoursite.com/2020/11/21/%E4%BB%8EBP%E4%B8%8ESP%E8%AF%B4%E5%BC%80%E5%8E%BB/"/>
    <id>http://yoursite.com/2020/11/21/%E4%BB%8EBP%E4%B8%8ESP%E8%AF%B4%E5%BC%80%E5%8E%BB/</id>
    <published>2020-11-21T03:03:15.000Z</published>
    <updated>2021-01-16T06:07:00.931Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;函数调用是解耦思想的一个基本体现。为了实现调用，我们往往需要给子程序提供一些参数并得到子程序的执行结果。今天就来探究一下这个过程在计算机内部是如何实现的。&lt;/p&gt;
&lt;h2 id=&quot;程序内存模型&quot;&gt;&lt;a href=&quot;#程序内存模型&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    <category term="计算机系统" scheme="http://yoursite.com/categories/计算机系统/"/>
    
    
    <category term="内存模型" scheme="http://yoursite.com/tags/内存模型/"/>
    
  </entry>
  
  <entry>
    <title>Golang 关键字 new 和 make 有啥不同?</title>
    <link href="http://yoursite.com/2020/08/03/Golang-%E5%85%B3%E9%94%AE%E5%AD%97-new-%E5%92%8C-make-%E6%9C%89%E5%95%A5%E4%B8%8D%E5%90%8C/"/>
    <id>http://yoursite.com/2020/08/03/Golang-%E5%85%B3%E9%94%AE%E5%AD%97-new-%E5%92%8C-make-%E6%9C%89%E5%95%A5%E4%B8%8D%E5%90%8C/</id>
    <published>2020-08-03T01:59:14.000Z</published>
    <updated>2020-08-03T02:40:50.536Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;当我们想要得到一个切片、哈希表或者 channel 的实例，我们常使用 &lt;code&gt;make&lt;/code&gt;；而如果我们需要一个指针，我们可以用 &lt;code&gt;new&lt;/code&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td</summary>
      
    
    
    
    <category term="语言" scheme="http://yoursite.com/categories/语言/"/>
    
    
    <category term="Go" scheme="http://yoursite.com/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>浅谈WiFi6</title>
    <link href="http://yoursite.com/2020/07/30/%E6%B5%85%E8%B0%88WiFi6/"/>
    <id>http://yoursite.com/2020/07/30/%E6%B5%85%E8%B0%88WiFi6/</id>
    <published>2020-07-30T01:44:35.000Z</published>
    <updated>2020-07-30T02:14:45.223Z</updated>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;什么是-WiFi6&quot;&gt;&lt;a href=&quot;#什么是-WiFi6&quot; class=&quot;headerlink&quot; title=&quot;什么是 WiFi6&quot;&gt;&lt;/a&gt;什么是 WiFi6&lt;/h2&gt;&lt;p&gt;WiFi 标准是 IEEE（电气电子工程师学会）制定的标准之一，IEEE 将最近几代</summary>
      
    
    
    
    <category term="计算机网络" scheme="http://yoursite.com/categories/计算机网络/"/>
    
    
    <category term="硬件" scheme="http://yoursite.com/tags/硬件/"/>
    
  </entry>
  
  <entry>
    <title>Go底层大冒险之defer</title>
    <link href="http://yoursite.com/2020/07/09/Go%E5%BA%95%E5%B1%82%E5%A4%A7%E5%86%92%E9%99%A9%E4%B9%8Bdefer/"/>
    <id>http://yoursite.com/2020/07/09/Go%E5%BA%95%E5%B1%82%E5%A4%A7%E5%86%92%E9%99%A9%E4%B9%8Bdefer/</id>
    <published>2020-07-09T00:08:07.000Z</published>
    <updated>2021-01-16T03:15:05.583Z</updated>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;defer&quot;&gt;&lt;a href=&quot;#defer&quot; class=&quot;headerlink&quot; title=&quot;defer&quot;&gt;&lt;/a&gt;defer&lt;/h2&gt;&lt;h3 id=&quot;应用&quot;&gt;&lt;a href=&quot;#应用&quot; class=&quot;headerlink&quot; title=&quot;应用&quot;&gt;&lt;/a&gt;应</summary>
      
    
    
    
    <category term="语言" scheme="http://yoursite.com/categories/语言/"/>
    
    
    <category term="Go" scheme="http://yoursite.com/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>Go底层大冒险之闭包</title>
    <link href="http://yoursite.com/2020/06/21/go%E5%BA%95%E5%B1%82%E5%A4%A7%E5%86%92%E9%99%A9%E4%B9%8B%E9%97%AD%E5%8C%85/"/>
    <id>http://yoursite.com/2020/06/21/go%E5%BA%95%E5%B1%82%E5%A4%A7%E5%86%92%E9%99%A9%E4%B9%8B%E9%97%AD%E5%8C%85/</id>
    <published>2020-06-21T02:14:29.000Z</published>
    <updated>2020-06-21T14:27:40.049Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;Go 语言中函数是所谓“头等对象”，即可以通过参数传递，可以做函数返回值，也可以做为右值赋值给一个变量。Go 语言把这样的参数、返回值、变量称为 &lt;code&gt;function value&lt;/code&gt;，本质上是一个指针，指向一个 &lt;code&gt;runtime.funcval&lt;</summary>
      
    
    
    
    <category term="语言" scheme="http://yoursite.com/categories/语言/"/>
    
    
    <category term="Go" scheme="http://yoursite.com/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>初探http包——go网络服务的第一步</title>
    <link href="http://yoursite.com/2020/06/03/http%E5%8C%85%E2%80%94%E2%80%94go%E7%BD%91%E7%BB%9C%E6%9C%8D%E5%8A%A1%E7%9A%84%E7%AC%AC%E4%B8%80%E6%AD%A5/"/>
    <id>http://yoursite.com/2020/06/03/http%E5%8C%85%E2%80%94%E2%80%94go%E7%BD%91%E7%BB%9C%E6%9C%8D%E5%8A%A1%E7%9A%84%E7%AC%AC%E4%B8%80%E6%AD%A5/</id>
    <published>2020-06-03T12:04:54.000Z</published>
    <updated>2020-06-04T03:25:55.745Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;仅需几行 go 代码就可以构建一个高效的 HTTP 服务器:&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span c</summary>
      
    
    
    
    <category term="语言" scheme="http://yoursite.com/categories/语言/"/>
    
    
    <category term="Go" scheme="http://yoursite.com/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>Go底层大冒险之channel</title>
    <link href="http://yoursite.com/2020/06/01/channel-Go%E7%9A%84%E4%BC%A0%E5%A3%B0%E7%AD%92/"/>
    <id>http://yoursite.com/2020/06/01/channel-Go%E7%9A%84%E4%BC%A0%E5%A3%B0%E7%AD%92/</id>
    <published>2020-06-01T06:54:30.000Z</published>
    <updated>2020-06-21T02:15:52.987Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;得益于 goroutine 的设计，Go 在执行并发任务是可谓是得心应手。既然存在并发，就必然牵扯到多任务同步的问题。当然，我们可以直接用共享内存来通信（如共享变量），但是 Go 的设计哲学中有一句话叫做&lt;code&gt;不要用共享内存来通信，而是用通信共享内存&lt;/code&gt;。利</summary>
      
    
    
    
    <category term="语言" scheme="http://yoursite.com/categories/语言/"/>
    
    
    <category term="Go" scheme="http://yoursite.com/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>Vim 从入门到放弃</title>
    <link href="http://yoursite.com/2020/05/22/Vim-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83/"/>
    <id>http://yoursite.com/2020/05/22/Vim-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83/</id>
    <published>2020-05-22T15:17:28.000Z</published>
    <updated>2021-01-15T06:43:50.988Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;如果问世界上最强大的语言是什么？答案或许有很多，但是如果问世界上最强大的编辑器是什么，恐怕很多人都回答都是 Vim。笔者从入门编程的第一天开始就听说了 Vim 的大名，然而苦于一大堆眼花缭乱的命令，屡屡尝试最后都是无疾而终。最近决心一定要把玩意儿入门了，于是开始跟着官方 t</summary>
      
    
    
    
    <category term="开发工具" scheme="http://yoursite.com/categories/开发工具/"/>
    
    
    <category term="Vim" scheme="http://yoursite.com/tags/Vim/"/>
    
  </entry>
  
  <entry>
    <title>Go底层大冒险之调度器</title>
    <link href="http://yoursite.com/2020/04/27/%E8%B0%83%E5%BA%A6%E5%99%A8%E2%80%94Go%E8%AF%AD%E8%A8%80%E7%9A%84%E5%A4%A7%E7%AE%A1%E5%AE%B6/"/>
    <id>http://yoursite.com/2020/04/27/%E8%B0%83%E5%BA%A6%E5%99%A8%E2%80%94Go%E8%AF%AD%E8%A8%80%E7%9A%84%E5%A4%A7%E7%AE%A1%E5%AE%B6/</id>
    <published>2020-04-27T08:41:26.000Z</published>
    <updated>2021-01-21T06:56:33.458Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;虽然线程比较轻量，但是在调度时也有比较大的额外开销。每个线程会都占用 1M 以上的内存空间，在对线程进行切换时不止会消耗较多的内存，恢复寄存器中的内容还需要向操作系统申请或者销毁对应的资源，每一次线程上下文的切换都需要消耗 1us 左右的时间。而 Go 调度器对 Gorou</summary>
      
    
    
    
    <category term="语言" scheme="http://yoursite.com/categories/语言/"/>
    
    
    <category term="Go" scheme="http://yoursite.com/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>网络IO</title>
    <link href="http://yoursite.com/2020/04/17/%E7%BD%91%E7%BB%9CIO/"/>
    <id>http://yoursite.com/2020/04/17/%E7%BD%91%E7%BB%9CIO/</id>
    <published>2020-04-17T15:17:38.000Z</published>
    <updated>2020-05-30T06:35:02.262Z</updated>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Linux-IO模型&quot;&gt;&lt;a href=&quot;#Linux-IO模型&quot; class=&quot;headerlink&quot; title=&quot;Linux IO模型&quot;&gt;&lt;/a&gt;Linux IO模型&lt;/h1&gt;&lt;p&gt;计算机之间可以通信，本质上也是计算机进程相互通信。为了方便不同终端进行通信，</summary>
      
    
    
    
    <category term="计算机系统" scheme="http://yoursite.com/categories/计算机系统/"/>
    
    
    <category term="并发编程" scheme="http://yoursite.com/tags/并发编程/"/>
    
  </entry>
  
  <entry>
    <title>并发编程-以 Go 为例</title>
    <link href="http://yoursite.com/2020/03/24/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-%E4%BB%A5Go%E4%B8%BA%E4%BE%8B/"/>
    <id>http://yoursite.com/2020/03/24/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-%E4%BB%A5Go%E4%B8%BA%E4%BE%8B/</id>
    <published>2020-03-24T15:49:51.000Z</published>
    <updated>2021-01-20T08:50:22.815Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;所谓&lt;code&gt;并发&lt;/code&gt;(concurrency) 是指几段程序在同一时间段内交错执行，当我们无法肯定一个事件一定会会先于另一个事件发生，那么就可以说这几个时间是“并发”的。如果一个函数在并发调用时仍能正确执行，这个函数就是&lt;code&gt;并发安全&lt;/code&gt;的；如</summary>
      
    
    
    
    <category term="计算机系统" scheme="http://yoursite.com/categories/计算机系统/"/>
    
    
    <category term="并发" scheme="http://yoursite.com/tags/并发/"/>
    
  </entry>
  
  <entry>
    <title>也说进程、线程与协程</title>
    <link href="http://yoursite.com/2020/03/02/%E4%B9%9F%E8%B0%88%E8%BF%9B%E7%A8%8B%E3%80%81%E7%BA%BF%E7%A8%8B%E4%B8%8E%E5%8D%8F%E7%A8%8B/"/>
    <id>http://yoursite.com/2020/03/02/%E4%B9%9F%E8%B0%88%E8%BF%9B%E7%A8%8B%E3%80%81%E7%BA%BF%E7%A8%8B%E4%B8%8E%E5%8D%8F%E7%A8%8B/</id>
    <published>2020-03-02T02:05:30.000Z</published>
    <updated>2021-01-20T13:17:13.423Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;CPU 被誉为“计算机的大脑”，这个比喻可以说是很恰当了。计算机无论是进行 IO 还是计算都要在 CPU 的控制下完成。如此一来，一个强大的“大脑”对于整个系统而言就是非常重要的了，这也是为什么我们总能看到厂家不断地宣传自己 CPU 的主频有多高，核心有多大。&lt;/p&gt;
&lt;p</summary>
      
    
    
    
    <category term="计算机系统" scheme="http://yoursite.com/categories/计算机系统/"/>
    
    
    <category term="并发编程" scheme="http://yoursite.com/tags/并发编程/"/>
    
  </entry>
  
  <entry>
    <title>开始你的Go Module之路</title>
    <link href="http://yoursite.com/2020/02/21/%E5%BC%80%E5%A7%8B%E4%BD%A0%E7%9A%84Go-Module%E4%B9%8B%E8%B7%AF/"/>
    <id>http://yoursite.com/2020/02/21/%E5%BC%80%E5%A7%8B%E4%BD%A0%E7%9A%84Go-Module%E4%B9%8B%E8%B7%AF/</id>
    <published>2020-02-21T15:07:01.000Z</published>
    <updated>2020-03-26T02:30:29.923Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;在 go 的历史上出现过一大批包管理工具，如 dep，vendor 等。自 go1.12 以来官方引入了 go module 来解决这个乱象。&lt;/p&gt;
&lt;h1 id=&quot;从-GOPATH-说起&quot;&gt;&lt;a href=&quot;#从-GOPATH-说起&quot; class=&quot;headerlink</summary>
      
    
    
    
    <category term="语言" scheme="http://yoursite.com/categories/语言/"/>
    
    
    <category term="Go" scheme="http://yoursite.com/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>回车 or 换行？</title>
    <link href="http://yoursite.com/2020/02/16/%E5%9B%9E%E8%BD%A6-or-%E6%8D%A2%E8%A1%8C%EF%BC%9F/"/>
    <id>http://yoursite.com/2020/02/16/%E5%9B%9E%E8%BD%A6-or-%E6%8D%A2%E8%A1%8C%EF%BC%9F/</id>
    <published>2020-02-16T12:23:01.000Z</published>
    <updated>2020-02-19T04:25:59.780Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;以前编程的时候一直没注意回车符与换行符的区别，只是大概知道一个是 \r 一个是 \n。今天心血来潮查了一下，发现这还蛮有趣的~&lt;/p&gt;
&lt;h1 id=&quot;回车-CR&quot;&gt;&lt;a href=&quot;#回车-CR&quot; class=&quot;headerlink&quot; title=&quot;回车 CR&quot;&gt;&lt;/a&gt;</summary>
      
    
    
    
    <category term="计算机系统" scheme="http://yoursite.com/categories/计算机系统/"/>
    
    
    <category term="编码" scheme="http://yoursite.com/tags/编码/"/>
    
  </entry>
  
  <entry>
    <title>网络那些事之URI</title>
    <link href="http://yoursite.com/2020/02/13/URI%E4%B8%8EURL/"/>
    <id>http://yoursite.com/2020/02/13/URI%E4%B8%8EURL/</id>
    <published>2020-02-13T01:29:36.000Z</published>
    <updated>2020-02-18T16:44:42.732Z</updated>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;什么是-URI&quot;&gt;&lt;a href=&quot;#什么是-URI&quot; class=&quot;headerlink&quot; title=&quot;什么是 URI&quot;&gt;&lt;/a&gt;什么是 URI&lt;/h1&gt;&lt;p&gt;URI(Uniform Resource Identifier)：统一资源标识符，用于&lt;strong</summary>
      
    
    
    
    <category term="计算机网络" scheme="http://yoursite.com/categories/计算机网络/"/>
    
    
    <category term="应用层" scheme="http://yoursite.com/tags/应用层/"/>
    
  </entry>
  
</feed>
