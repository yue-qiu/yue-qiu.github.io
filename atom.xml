<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>精神的壳</title>
  
  
  <link href="http://yoursite.com/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2021-01-20T12:55:43.997Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>路边的土豆</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>管程</title>
    <link href="http://yoursite.com/2019/10/13/%E7%AE%A1%E7%A8%8B/"/>
    <id>http://yoursite.com/2019/10/13/%E7%AE%A1%E7%A8%8B/</id>
    <published>2019-10-13T08:12:58.000Z</published>
    <updated>2021-01-20T12:55:43.997Z</updated>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;管程&quot;&gt;&lt;a href=&quot;#管程&quot; class=&quot;headerlink&quot; title=&quot;管程&quot;&gt;&lt;/a&gt;管程&lt;/h1&gt;&lt;p&gt;管程是一种抽象概念，封装了一个锁、几个条件变量和共享资源。锁保证了某个时刻只有一个线程能进入管程，而条件变量用来控制共享资源。&lt;/p&gt;
&lt;h</summary>
      
    
    
    
    <category term="计算机系统" scheme="http://yoursite.com/categories/计算机系统/"/>
    
    
    <category term="并发编程" scheme="http://yoursite.com/tags/并发编程/"/>
    
  </entry>
  
  <entry>
    <title>Golang 关键字 new 和 make 有啥不同?</title>
    <link href="http://yoursite.com/2020/08/03/Golang-%E5%85%B3%E9%94%AE%E5%AD%97-new-%E5%92%8C-make-%E6%9C%89%E5%95%A5%E4%B8%8D%E5%90%8C/"/>
    <id>http://yoursite.com/2020/08/03/Golang-%E5%85%B3%E9%94%AE%E5%AD%97-new-%E5%92%8C-make-%E6%9C%89%E5%95%A5%E4%B8%8D%E5%90%8C/</id>
    <published>2020-08-03T01:59:14.000Z</published>
    <updated>2020-08-03T02:40:50.536Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;当我们想要得到一个切片、哈希表或者 channel 的实例，我们常使用 &lt;code&gt;make&lt;/code&gt;；而如果我们需要一个指针，我们可以用 &lt;code&gt;new&lt;/code&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td</summary>
      
    
    
    
    <category term="语言" scheme="http://yoursite.com/categories/语言/"/>
    
    
    <category term="Go" scheme="http://yoursite.com/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>Java基础—处理异常</title>
    <link href="http://yoursite.com/2018/06/24/Java%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E2%80%94-%E5%A4%84%E7%90%86%E5%BC%82%E5%B8%B8/"/>
    <id>http://yoursite.com/2018/06/24/Java%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E2%80%94-%E5%A4%84%E7%90%86%E5%BC%82%E5%B8%B8/</id>
    <published>2018-06-24T01:39:22.000Z</published>
    <updated>2020-02-21T15:21:29.954Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;处理异常的任务就是将控制权从错误产生的地方转移给能够处理这种情况的错误处理器。如果某个方法不能采用正常的途径完成他的任务 ，就可以通过另外一个路径退出方法。在这种情况下，方法并不能返回任何值，而是抛出（throw）一个封装了错误信息的对象，然后这个方法会退出且不返回任何值。</summary>
      
    
    
    
    <category term="语言" scheme="http://yoursite.com/categories/语言/"/>
    
    
    <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java基础—包</title>
    <link href="http://yoursite.com/2018/06/15/Java%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E2%80%94%E2%80%94%E5%8C%85/"/>
    <id>http://yoursite.com/2018/06/15/Java%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E2%80%94%E2%80%94%E5%8C%85/</id>
    <published>2018-06-15T01:46:18.000Z</published>
    <updated>2020-02-21T15:20:56.096Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;Java 允许使用包（package）将类组织起来，使用包的主要原因是确保类名的唯一性。如果有两个名字相同的类，只要把它们放在不同的包中就不会有影响。&lt;/p&gt;
&lt;p&gt;从编译器（compiler）的角度看，嵌套的包之间没有任何关系。例如java.util包与 java.uti</summary>
      
    
    
    
    <category term="语言" scheme="http://yoursite.com/categories/语言/"/>
    
    
    <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java基础—继承与多态</title>
    <link href="http://yoursite.com/2018/06/15/Java%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E2%80%94%E2%80%94%E7%BB%A7%E6%89%BF%E4%B8%8E%E5%A4%9A%E6%80%81/"/>
    <id>http://yoursite.com/2018/06/15/Java%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E2%80%94%E2%80%94%E7%BB%A7%E6%89%BF%E4%B8%8E%E5%A4%9A%E6%80%81/</id>
    <published>2018-06-15T08:23:40.000Z</published>
    <updated>2020-02-21T15:21:40.548Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;修饰符&lt;code&gt;extends&lt;/code&gt;表示继承，子类会继承超类的域和方法。例如子类Manager继承超类Employee：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;</summary>
      
    
    
    
    <category term="语言" scheme="http://yoursite.com/categories/语言/"/>
    
    
    <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>网络那些事之URI</title>
    <link href="http://yoursite.com/2020/02/13/URI%E4%B8%8EURL/"/>
    <id>http://yoursite.com/2020/02/13/URI%E4%B8%8EURL/</id>
    <published>2020-02-13T01:29:36.000Z</published>
    <updated>2020-02-18T16:44:42.732Z</updated>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;什么是-URI&quot;&gt;&lt;a href=&quot;#什么是-URI&quot; class=&quot;headerlink&quot; title=&quot;什么是 URI&quot;&gt;&lt;/a&gt;什么是 URI&lt;/h1&gt;&lt;p&gt;URI(Uniform Resource Identifier)：统一资源标识符，用于&lt;strong</summary>
      
    
    
    
    <category term="计算机网络" scheme="http://yoursite.com/categories/计算机网络/"/>
    
    
    <category term="应用层" scheme="http://yoursite.com/tags/应用层/"/>
    
  </entry>
  
  <entry>
    <title>Java 禁止创建泛型数组</title>
    <link href="http://yoursite.com/2019/01/27/Java%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94%E6%B3%9B%E5%9E%8B%E6%95%B0%E7%BB%84/"/>
    <id>http://yoursite.com/2019/01/27/Java%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94%E6%B3%9B%E5%9E%8B%E6%95%B0%E7%BB%84/</id>
    <published>2019-01-27T10:00:45.000Z</published>
    <updated>2020-03-02T14:19:29.885Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;java 不允许直接创建泛型数组，也不允许创建泛型实例。也就是说下面这种情况是不被允许的：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;</summary>
      
    
    
    
    <category term="语言" scheme="http://yoursite.com/categories/语言/"/>
    
    
    <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Vim 从入门到放弃</title>
    <link href="http://yoursite.com/2020/05/22/Vim-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83/"/>
    <id>http://yoursite.com/2020/05/22/Vim-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83/</id>
    <published>2020-05-22T15:17:28.000Z</published>
    <updated>2021-01-15T06:43:50.988Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;如果问世界上最强大的语言是什么？答案或许有很多，但是如果问世界上最强大的编辑器是什么，恐怕很多人都回答都是 Vim。笔者从入门编程的第一天开始就听说了 Vim 的大名，然而苦于一大堆眼花缭乱的命令，屡屡尝试最后都是无疾而终。最近决心一定要把玩意儿入门了，于是开始跟着官方 t</summary>
      
    
    
    
    <category term="开发工具" scheme="http://yoursite.com/categories/开发工具/"/>
    
    
    <category term="Vim" scheme="http://yoursite.com/tags/Vim/"/>
    
  </entry>
  
  <entry>
    <title>Go底层大冒险之闭包</title>
    <link href="http://yoursite.com/2020/06/21/go%E5%BA%95%E5%B1%82%E5%A4%A7%E5%86%92%E9%99%A9%E4%B9%8B%E9%97%AD%E5%8C%85/"/>
    <id>http://yoursite.com/2020/06/21/go%E5%BA%95%E5%B1%82%E5%A4%A7%E5%86%92%E9%99%A9%E4%B9%8B%E9%97%AD%E5%8C%85/</id>
    <published>2020-06-21T02:14:29.000Z</published>
    <updated>2020-06-21T14:27:40.049Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;Go 语言中函数是所谓“头等对象”，即可以通过参数传递，可以做函数返回值，也可以做为右值赋值给一个变量。Go 语言把这样的参数、返回值、变量称为 &lt;code&gt;function value&lt;/code&gt;，本质上是一个指针，指向一个 &lt;code&gt;runtime.funcval&lt;</summary>
      
    
    
    
    <category term="语言" scheme="http://yoursite.com/categories/语言/"/>
    
    
    <category term="Go" scheme="http://yoursite.com/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>初探http包——go网络服务的第一步</title>
    <link href="http://yoursite.com/2020/06/03/http%E5%8C%85%E2%80%94%E2%80%94go%E7%BD%91%E7%BB%9C%E6%9C%8D%E5%8A%A1%E7%9A%84%E7%AC%AC%E4%B8%80%E6%AD%A5/"/>
    <id>http://yoursite.com/2020/06/03/http%E5%8C%85%E2%80%94%E2%80%94go%E7%BD%91%E7%BB%9C%E6%9C%8D%E5%8A%A1%E7%9A%84%E7%AC%AC%E4%B8%80%E6%AD%A5/</id>
    <published>2020-06-03T12:04:54.000Z</published>
    <updated>2020-06-04T03:25:55.745Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;仅需几行 go 代码就可以构建一个高效的 HTTP 服务器:&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span c</summary>
      
    
    
    
    <category term="语言" scheme="http://yoursite.com/categories/语言/"/>
    
    
    <category term="Go" scheme="http://yoursite.com/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>java基础-使用集合类</title>
    <link href="http://yoursite.com/2018/06/28/java%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1-%E9%9B%86%E5%90%88/"/>
    <id>http://yoursite.com/2018/06/28/java%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1-%E9%9B%86%E5%90%88/</id>
    <published>2018-06-28T12:12:12.000Z</published>
    <updated>2020-02-21T15:21:15.559Z</updated>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;将集合的接口与实现分离&quot;&gt;&lt;a href=&quot;#将集合的接口与实现分离&quot; class=&quot;headerlink&quot; title=&quot;将集合的接口与实现分离&quot;&gt;&lt;/a&gt;将集合的接口与实现分离&lt;/h1&gt;&lt;p&gt;Java集合类库将&lt;code&gt;接口（interface）&lt;/code</summary>
      
    
    
    
    <category term="语言" scheme="http://yoursite.com/categories/语言/"/>
    
    
    <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>unittest简介</title>
    <link href="http://yoursite.com/2018/05/23/unittest%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    <id>http://yoursite.com/2018/05/23/unittest%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</id>
    <published>2018-05-23T09:08:42.000Z</published>
    <updated>2020-03-02T14:19:27.877Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;有个词叫TDD(Tset Driven Development)，测试驱动开发。一个好的开发人员不仅要懂开发，还要懂得一定的测试技巧。python自带了很多的测试库，比如unittest，coverage….介绍一下unittest的使用。&lt;/p&gt;
&lt;h1 id=&quot;unit</summary>
      
    
    
    
    <category term="语言" scheme="http://yoursite.com/categories/语言/"/>
    
    
    <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>MySQL之事务与优化</title>
    <link href="http://yoursite.com/2018/06/03/%E3%80%8AMySQL%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A%E3%80%8B%E4%B9%8B%E4%BA%8B%E4%BB%B6%E4%B8%8E%E4%BC%98%E5%8C%96/"/>
    <id>http://yoursite.com/2018/06/03/%E3%80%8AMySQL%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A%E3%80%8B%E4%B9%8B%E4%BA%8B%E4%BB%B6%E4%B8%8E%E4%BC%98%E5%8C%96/</id>
    <published>2018-06-03T07:03:41.000Z</published>
    <updated>2020-05-11T00:22:35.684Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;在 MySQL 中，事务由一条或多条 SQL 语句组成，在这个事务中，每条 MySQL 语句是相互依赖的。而整个事务作为一个不可分割的整体，一旦某条 MySQL 语句执行失败或产生错误，整个事务将会回滚。&lt;/p&gt;
&lt;p&gt;只有 &lt;code&gt;InnoDB&lt;/code&gt; 类型的表</summary>
      
    
    
    
    <category term="数据库" scheme="http://yoursite.com/categories/数据库/"/>
    
    
    <category term="MySQL" scheme="http://yoursite.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>MySQL之备份与恢复</title>
    <link href="http://yoursite.com/2018/06/03/%E3%80%8AMySQL%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A%E3%80%8B%E4%B9%8B%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D/"/>
    <id>http://yoursite.com/2018/06/03/%E3%80%8AMySQL%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A%E3%80%8B%E4%B9%8B%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D/</id>
    <published>2018-06-03T11:35:59.000Z</published>
    <updated>2020-03-12T01:01:31.044Z</updated>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;使用mysqldump命令备份&quot;&gt;&lt;a href=&quot;#使用mysqldump命令备份&quot; class=&quot;headerlink&quot; title=&quot;使用mysqldump命令备份&quot;&gt;&lt;/a&gt;使用mysqldump命令备份&lt;/h1&gt;&lt;p&gt;&lt;code&gt;mysqldump&lt;/c</summary>
      
    
    
    
    <category term="数据库" scheme="http://yoursite.com/categories/数据库/"/>
    
    
    <category term="MySQL" scheme="http://yoursite.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>MySQL之索引与范式</title>
    <link href="http://yoursite.com/2018/05/30/%E3%80%8AMySQL%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A%E3%80%8B%E4%B9%8B%E7%B4%A2%E5%BC%95%E4%B8%8E%E8%A7%86%E5%9B%BE/"/>
    <id>http://yoursite.com/2018/05/30/%E3%80%8AMySQL%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A%E3%80%8B%E4%B9%8B%E7%B4%A2%E5%BC%95%E4%B8%8E%E8%A7%86%E5%9B%BE/</id>
    <published>2018-05-30T10:33:48.000Z</published>
    <updated>2020-03-12T00:58:04.140Z</updated>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;索引&quot;&gt;&lt;a href=&quot;#索引&quot; class=&quot;headerlink&quot; title=&quot;索引&quot;&gt;&lt;/a&gt;索引&lt;/h1&gt;&lt;p&gt;索引是一种特殊的数据结构，类似于字典里的 key。通过索引查询数据库中的内容时，不需要遍历所有数据而是直接指向数据所在的位置，这样就可以快速</summary>
      
    
    
    
    <category term="数据库" scheme="http://yoursite.com/categories/数据库/"/>
    
    
    <category term="MySQL" scheme="http://yoursite.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>函数调用背后的秘密——寄存器与栈</title>
    <link href="http://yoursite.com/2020/11/21/%E4%BB%8EBP%E4%B8%8ESP%E8%AF%B4%E5%BC%80%E5%8E%BB/"/>
    <id>http://yoursite.com/2020/11/21/%E4%BB%8EBP%E4%B8%8ESP%E8%AF%B4%E5%BC%80%E5%8E%BB/</id>
    <published>2020-11-21T03:03:15.000Z</published>
    <updated>2021-01-16T06:07:00.931Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;函数调用是解耦思想的一个基本体现。为了实现调用，我们往往需要给子程序提供一些参数并得到子程序的执行结果。今天就来探究一下这个过程在计算机内部是如何实现的。&lt;/p&gt;
&lt;h2 id=&quot;程序内存模型&quot;&gt;&lt;a href=&quot;#程序内存模型&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    <category term="计算机系统" scheme="http://yoursite.com/categories/计算机系统/"/>
    
    
    <category term="内存模型" scheme="http://yoursite.com/tags/内存模型/"/>
    
  </entry>
  
  <entry>
    <title>大话光猫，路由器与交换机</title>
    <link href="http://yoursite.com/2020/12/21/%E5%85%89%E7%8C%AB%EF%BC%8C%E8%B7%AF%E7%94%B1%E4%B8%8E%E4%BA%A4%E6%8D%A2%E6%9C%BA/"/>
    <id>http://yoursite.com/2020/12/21/%E5%85%89%E7%8C%AB%EF%BC%8C%E8%B7%AF%E7%94%B1%E4%B8%8E%E4%BA%A4%E6%8D%A2%E6%9C%BA/</id>
    <published>2020-12-21T01:00:15.000Z</published>
    <updated>2020-12-21T02:39:28.708Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;生活中最常见的网络设备就是光猫和路由器了。一些较大型的企业可能还会用到交换机。以家庭上网为例，数据从光纤到达个人设备的流程是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/12/21/fD5YlTFmNaG49hq.png&quot; al</summary>
      
    
    
    
    <category term="计算机网络" scheme="http://yoursite.com/categories/计算机网络/"/>
    
    
    <category term="硬件" scheme="http://yoursite.com/tags/硬件/"/>
    
  </entry>
  
  <entry>
    <title>回车 or 换行？</title>
    <link href="http://yoursite.com/2020/02/16/%E5%9B%9E%E8%BD%A6-or-%E6%8D%A2%E8%A1%8C%EF%BC%9F/"/>
    <id>http://yoursite.com/2020/02/16/%E5%9B%9E%E8%BD%A6-or-%E6%8D%A2%E8%A1%8C%EF%BC%9F/</id>
    <published>2020-02-16T12:23:01.000Z</published>
    <updated>2020-02-19T04:25:59.780Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;以前编程的时候一直没注意回车符与换行符的区别，只是大概知道一个是 \r 一个是 \n。今天心血来潮查了一下，发现这还蛮有趣的~&lt;/p&gt;
&lt;h1 id=&quot;回车-CR&quot;&gt;&lt;a href=&quot;#回车-CR&quot; class=&quot;headerlink&quot; title=&quot;回车 CR&quot;&gt;&lt;/a&gt;</summary>
      
    
    
    
    <category term="计算机系统" scheme="http://yoursite.com/categories/计算机系统/"/>
    
    
    <category term="编码" scheme="http://yoursite.com/tags/编码/"/>
    
  </entry>
  
  <entry>
    <title>也谈 Unicode</title>
    <link href="http://yoursite.com/2018/05/23/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%BC%96%E7%A0%81/"/>
    <id>http://yoursite.com/2018/05/23/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%BC%96%E7%A0%81/</id>
    <published>2018-05-23T14:47:56.000Z</published>
    <updated>2020-06-01T06:54:55.890Z</updated>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;不同的编码方式&quot;&gt;&lt;a href=&quot;#不同的编码方式&quot; class=&quot;headerlink&quot; title=&quot;不同的编码方式&quot;&gt;&lt;/a&gt;不同的编码方式&lt;/h2&gt;&lt;p&gt;由于计算机是美国人发明的，所以最早的时候只收录了 127 个字符，包括阿拉伯数字、英文字母大小写和一</summary>
      
    
    
    
    <category term="计算机系统" scheme="http://yoursite.com/categories/计算机系统/"/>
    
    
    <category term="编码" scheme="http://yoursite.com/tags/编码/"/>
    
  </entry>
  
  <entry>
    <title>常用的gcc编译选项</title>
    <link href="http://yoursite.com/2021/01/13/%E5%B8%B8%E7%94%A8%E7%9A%84gcc%E7%BC%96%E8%AF%91%E9%80%89%E9%A1%B9/"/>
    <id>http://yoursite.com/2021/01/13/%E5%B8%B8%E7%94%A8%E7%9A%84gcc%E7%BC%96%E8%AF%91%E9%80%89%E9%A1%B9/</id>
    <published>2021-01-13T09:32:17.000Z</published>
    <updated>2021-01-14T03:14:35.908Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;本文旨在对 gcc 常用编译选项进行归类整理，全部选项可以通过执行如下命令得到：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span</summary>
      
    
    
    
    <category term="开发工具" scheme="http://yoursite.com/categories/开发工具/"/>
    
    
    <category term="gcc" scheme="http://yoursite.com/tags/gcc/"/>
    
  </entry>
  
</feed>
